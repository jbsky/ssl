#!/bin/bash -x
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+  ${SCRIPT_NAME} -a Root
#+  ${SCRIPT_NAME} -a Int1 -p Root [-f]
#+  ${SCRIPT_NAME} -a Root -c -s -o ocsp.example.com [-f]
#+  ${SCRIPT_NAME} -a Int1 -s mysite.example.com [-f]
#+  ${SCRIPT_NAME} -a Root -r ocsp.example.com [-f]
#+  ${SCRIPT_NAME} -a Int1 -l
#+  ${SCRIPT_NAME} -a Int1 -t mysite.example.com
#+
#% DESCRIPTION
#% Script helping to generate and manage SSL certificates.
#%
#% OPTIONS
#%  -a $name | --authority=$name            Create a new authority or choose an existing authority
#%  -p $name | --parent=$name             Relative parent only used when create authority
#%  -s $CN | --server=$CN               Add nsCertType server and extendedKeyUsage serverAuth
#%  -c $CN | --client=$CN               Add nsCertType client and extendedKeyUsage clientAuth
#%  -o $CN | --ocsp=$CN                 Add extendedKeyUsage OCSPSigning
#%  -m $CN | --mail=$CN                 Add nsCertType client and emailProtection
#%  -r $CN | --revoke=$CN               Revoke cert
#%  -f                        Create fast without question C/O/OU/L/ST/emailAddress
#%  -t $CN                      Text out cert
#%  -l                        List cert
#%  -h                        print this help
#%  -v                        verbose
#%
#%
#================================================================
#- IMPLEMENTATION
#-  version     ${SCRIPT_NAME} 1.0
#-  author      Julien BLAIS
#-  license     GNU General Public License
#-
#================================================================
#  HISTORY
#   2019/12/29 : Passage a la version 1.0
#
#================================================================
#  DEBUG OPTION
# set -n  # Uncomment to check your syntax, without execution.
# set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================

SSL_DIR="${HOME}/ssl"
KEY_DIR="${HOME}/.keys"
bits=8192
bits=1024
days=3650
ocsp=

C="FR"
ST=""
L=""
O=""
OU=""
emailAddress=""

# typeset -A SSL_FLD
# Ordre ou sont posees les questions
SSL_FLD=(
  O
  OU
  C
  L
  ST
  emailAddress
)
#============================
#  PARSE OPTIONS WITH GETOPTS
#============================

  #== set short options ==#
SCRIPT_OPTS='hvsr:ca:-:t:p:oflm'

  #== set long options associated with short one ==#
typeset -A ARRAY_OPTS
ARRAY_OPTS=(
  [help]=h
  [text]=t
  [verbose]=v
  [revoke]=r
  [server]=s
  [client]=c
  [mail]=m
  [authority]=a
  [parent]=p
  [info]=i
  [list]=l
  [ocsp]=o
  [fast]=f
)
#============================
#  FUNCTIONS
#============================
#============================
#  FUNCTIONS Creation de repertoire
#============================
_mkdir(){

  if [ ! -d "${1}" ];then
    mkdir -p "${1}"
    chgrp ssl-cert "${1}"
    info "${SCRIPT_NAME}: Config folder created ${1}" 1>&2
  fi
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintOCSPServerConf(){
  printf "[ v3_OCSP ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = OCSPSigning\n"
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintMinimalConf(){
  printf "[ req ]
distinguished_name = req_distinguished_name

[ req_distinguished_name ]

# [ v3_req ]
# basicConstraints = CA:FALSE
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment
# extendedKeyUsage = serverAuth, clientAuth, OCSPSigning

[ policy_match ]
countryName       = match
stateOrProvinceName   = optional
organizationName    = match
organizationalUnitName  = optional
commonName        = supplied
emailAddress      = optional

[ tmp_ca ]
dir       = ${WK_DIR}
certs       = \$dir/certs
crl_dir     = \$dir/crl
database    = \$dir/index.txt
new_certs_dir   = \$dir/newcerts
certificate   = \$dir/cacert.pem
serial      = \$dir/serial
crlnumber     = \$dir/crlnumber
crl       = \$dir/crl.pem
private_key   = \$dir/private/cakey.pem
RANDFILE    = \$dir/private/.rand
x509_extensions = usr_cert
name_opt    = ca_default
cert_opt    = ca_default
default_days  = 365
default_crl_days= 30
default_md    = default         # use public key default MD
preserve    = no          # keep passed DN ordering
policy      = policy_match

# Ajout de la partie suivante pour signer un certif d'autorite enfant
[ ca ]
default_ca    = tmp_ca\n"
}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
Print_V3CAConf(){
  printf "[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = critical,CA:true
keyUsage = cRLSign, keyCertSign
nsCertType = sslCA, emailCA\n"
}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintCAConf(){
  printf "[ ca_ext ]
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:true
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always\n"
}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintCertConf(){
  printf "[ cert ]
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid,issuer:always
issuerAltName           = issuer:copy
basicConstraints          = critical,CA:FALSE
keyUsage              = digitalSignature, nonRepudiation, keyEncipherment
extendedKeyUsage          = ${extendedKeyUsage}
nsComment             = \"OpenSSL Generated Certificate\"\n"

  if [ "${nsCertType}" != "" ];then
    printf "nsCertType            = ${nsCertType}\n"
  fi
  if [ "${ocsp}" != "" ]; then
    printf "authorityInfoAccess = OCSP;URI:http://${ocsp}\n"
  fi
  if [ ${flagOptServeur} -eq 1 ]&& [ ${flagOptMail} -eq 1 ];then
    printf "subjectAltName          = @alt_names,email:move\n\n[alt_names]\n${alt_names}\n"
  else
    if [ ${flagOptServeur} -eq 1 ]&& [ ${flagOptMail} -eq 0 ];then
      printf "subjectAltName          = @alt_names\n\n[alt_names]\n${alt_names}\n"
    else
      printf "subjectAltName          =email:move\n"
    fi
  fi
}
#============================
#  FUNCTIONS Creation d'un certificat d'autorite
#============================
CreerAutorite(){
  info "CreerAutorite"

  if [ ${flagOptParent} -eq 1 ];then

    WK_DIR="${SSL_DIR}/${OptParent}"
    # Extraction du Subject du parent
    SUB=$(openssl x509 -noout -subject -in ${WK_DIR}/cacert.pem)

    # Formatage pour extraction des differents champs OU/C/O/L/ST/emailAddress
    WK_SUB=$(echo ${SUB#*=} | sed -e "s/\ =\ /='/g"|sed -e "s/, /',/g"|sed 's/[[:blank:]]*$//')\'

    # On compte le nombre de champ a extraire par le caractere ","
    COUNTER=$(($(echo ${WK_SUB} | grep -o "," | wc -l)+1))

    if [ "${COUNTER}" -gt "0" ];then
      for ((i=1;i<=${COUNTER};i++));
      do
        eval $(cut -d "," -f $i <<< ${WK_SUB})
      done
    fi
    WK_DIR="${SSL_DIR}/${OptAutorite}"
  else
    O=${OptAutorite}
  fi
  CN="${OptAutorite} - Certification Authority Root"
  OU="Secure Digital Certificate Signing"
  if [ ${flagOptFast} -eq 0 ];then

    for field in ${SSL_FLD[@]}
    do
      read -p "Please enter a new value or enter to confirm ${field}=${!field} : " NEW_VALUE
      if [[ "${NEW_VALUE}" != "" ]];then
        eval "${field}=${NEW_VALUE}"
      fi
    done
  fi


  [ "${C}" = "" ] ||subj="/C=${C}"
  [ "${ST}" = "" ]||subj="${subj}/ST=${ST}"
  [ "${L}" = "" ] ||subj="${subj}/L=${L}"
  [ "${O}" = "" ] ||subj="${subj}/O=${O}"
  [ "${OU}" = "" ]||subj="${subj}/OU=${OU}"
  [ "${emailAddress}" = "" ]||subj="${subj}/emailAddress=${emailAddress}"
  subj="${subj}/CN=${CN}"

  _mkdir "${WK_DIR}/certs"
  _mkdir "${WK_DIR}/crl"
  _mkdir "${WK_DIR}/newcerts"
  _mkdir "${WK_DIR}/private"
  _mkdir "${WK_DIR}/p12"
  if [ ${flagOptFast} -eq 0 ];then
    read -p "Please enter a URL for ocsp serveur : " ocsp
  fi
  if [[ "ocsp" != "" ]];then
    echo "ocsp=${ocsp}" > "${WK_DIR}/default"
  fi
  chmod -R 750 "${WK_DIR}/private"

  if [[ ! -f "${WK_DIR}/private/cakey.pem" ]]; then
    touch "${WK_DIR}/index.txt"
    touch "${WK_DIR}/serial"
    RANDPASS=$(date | md5sum |  cut -c1-16)
    touch "${KEY_DIR}/${OptAutorite}.key"
    echo "$RANDPASS" >  "${KEY_DIR}/${OptAutorite}.key"
    openssl genrsa -aes256 -out "${WK_DIR}/private/cakey.pem" -passout file:"${KEY_DIR}/${OptAutorite}.key" ${bits}
    chmod 400 "${WK_DIR}/private/cakey.pem"
    chgrp ssl-cert "${WK_DIR}/private/cakey.pem"
    info $(cat ${WK_DIR}/serial )

  fi

  # Soit le nouveau certificat d'autorite a un parent => certificat d'autorite intermediaire
  if [ ${flagOptParent} -eq 1 ];then

    # Creation d'un CSR...
    if [[ ! -f "${SSL_DIR}/${OptAutorite}/CA.csr" ]]; then
      openssl req -new -out "${SSL_DIR}/${OptAutorite}/CA.csr" -key "${SSL_DIR}/${OptAutorite}/private/cakey.pem" -passin file:"${KEY_DIR}/${OptAutorite}.key" -subj "${subj}" -config <(PrintMinimalConf)
    fi
    # On switch sur la conf parent
    WK_DIR="${SSL_DIR}/${OptParent}"

    # La certif parent signe avec sa cle
    if [[ ! -f "${SSL_DIR}/${OptAutorite}/cacert.pem.backup" ]]; then
      openssl ca -batch -days ${days} -create_serial -passin file:"${KEY_DIR}/${OptParent}.key" -in "${SSL_DIR}/${OptAutorite}/CA.csr" -out "${SSL_DIR}/${OptAutorite}/cacert.pem.backup" -extensions ca_ext -notext -config <(PrintMinimalConf;PrintCAConf)

      chgrp ssl-cert "${SSL_DIR}/${OptAutorite}/cacert.pem.backup"
      chmod 644 "${SSL_DIR}/${OptAutorite}/cacert.pem.backup"
      openssl x509 -serial -noout -in "${SSL_DIR}/${OptAutorite}/cacert.pem.backup" | cut -d= -f2 > "${SSL_DIR}/${OptAutorite}/serial"
      printf "%X\n" $((0x`cat "${SSL_DIR}/${OptAutorite}/serial"`+1))>"${SSL_DIR}/${OptAutorite}/serial"
    fi
    # On cree la chaine CA Racine + celui qu'on vient de creer.
    cat "${SSL_DIR}/${OptAutorite}/cacert.pem.backup" "${WK_DIR}/cacert.pem" > "${SSL_DIR}/${OptAutorite}/cacert.pem"

    # On switch sur la nouvelle autorite
    WK_DIR="${SSL_DIR}/${OptAutorite}"
  else
    # Soit le certificat est bien racine / pas de parent
    if [[ ! -f "${WK_DIR}/cacert.pem" ]]; then
      openssl req -x509 -sha512 -extensions v3_ca -days ${days} -subj "${subj}" -key "${WK_DIR}/private/cakey.pem" -passin file:"${KEY_DIR}/${OptAutorite}.key" -out "${WK_DIR}/cacert.pem" -config <(PrintMinimalConf;Print_V3CAConf)
      chgrp ssl-cert "${WK_DIR}/cacert.pem"
      chmod 644 "${WK_DIR}/cacert.pem"
      openssl x509 -serial -noout -in "${WK_DIR}/cacert.pem" | cut -d= -f2 > "${WK_DIR}/serial"
      printf "%X\n" $((0x`cat "${WK_DIR}/serial"`+1))>"${WK_DIR}/serial"
    fi
  fi


}

#============================
#  FUNCTIONS Revoke un certificat
#============================
RevokeCertificat(){
info "Repertoire de travail: ${WK_DIR}"
openssl ca -revoke "${WK_DIR}/certs/${OptRevokeCert}.pem" -name tmp_ca -passin file:"${KEYFILE}"  -config <(PrintMinimalConf)

mv "${WK_DIR}/certs/${OptRevokeCert}.pem"  "${WK_DIR}/certs/${OptRevokeCert}.pem.${DATE}.drop"
mv "${WK_DIR}/private/${OptRevokeCert}.key"  "${WK_DIR}/private/${OptRevokeCert}.key.${DATE}.drop"
}

#============================
#  FUNCTIONS Creer un certificat
#============================
CreerCertificat(){

  # Extraction du Subject
  SUB=$(openssl x509 -noout -subject -in "${WK_DIR}/cacert.pem")

  # Formatage pour extraction des differents champs OU/C/O/L/ST/emailAddress
  WK_SUB=$(echo ${SUB#*=} | sed -e "s/\ =\ /='/g"|sed -e "s/, /',/g"|sed 's/[[:blank:]]*$//')\'

  # On compte le nombre de champ a extraire par le caractere ","
  COUNTER=$(($(echo ${WK_SUB} | grep -o "," | wc -l)+1))

  if [ "${COUNTER}" -gt "0" ];then
    for ((i=1;i<=${COUNTER};i++));
    do
      eval $(cut -d "," -f $i <<< ${WK_SUB})
    done
  fi

  if [ ${flagOptFast} -eq 0 ];then
    for field in ${SSL_FLD[@]}
    do
      read -p "Please enter a new value or enter to confirm ${field}=${!field} : " NEW_VALUE
      if [[ "${NEW_VALUE}" != "" ]];then
        $(${!field}=${NEW_VALUE})
      fi
    done
  fi

  extendedKeyUsage=""
  nsCertType=""
  if [ ${flagOptClient} -eq 1 ]||[ ${flagOptMail} -eq 1 ];then
    nsCertType="client"
    extendedKeyUsage="clientAuth"
  fi
  if [ ${flagOptMail} -eq 1 ];then
    [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, emailProtection"
    [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="clientAuth, emailProtection"
  fi
  if [ ${flagOptServeur} -eq 1 ];then
    [[ "${nsCertType}" != "" ]] && nsCertType="${nsCertType}, server"
    [[ "${nsCertType}" == "" ]] && nsCertType="server"
    [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, serverAuth"
    [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="serverAuth"
  fi
  if [ ${flagOptOCSP} -eq 1 ];then
    [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, OCSPSigning"
    [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="OCSPSigning"
  fi
  index=0
  [ "${C}" = "" ] ||subj="/C=${C}"
  [ "${ST}" = "" ]||subj="${subj}/ST=${ST}"
  [ "${L}" = "" ] ||subj="${subj}/L=${L}"
  [ "${O}" = "" ] ||subj="${subj}/O=${O}"
  [ "${OU}" = "" ]||subj="${subj}/OU=${OU}"
  [ "${emailAddress}" = "" ]||subj="${subj}/emailAddress=${emailAddress}"
  if [ "${OptCN}" != "" ]; then
    OLDIFS=$IFS
    IFS=','

    read -ra field <<< ${OptCN[*]}
    for CommonName in "${field[@]}";
    do
      if [[ "${firstCN}" == ""  ]];then
      # alt_names="DNS.${index}:${CommonName}"
        firstCN=${CommonName}
        index=$((${index}+1))
        alt_names="DNS.${index}=${CommonName}"
      else
        index=$((${index}+1))
        alt_names="${alt_names}\nDNS.${index}=${CommonName}"
      fi
    done
    IFS=$OLDIFS
    CommonName=""
  else
    # sinon on ajoute un espace pour entrer dans la boucle suivante :)
    CommonName=" "
  fi

  while [ "${CommonName}" != "" ];do
    read -p "CN ${index}:" CommonName
    if [[ "${CommonName}" != "" && "${firstCN}" == ""  ]];then
      firstCN=${CommonName}
      index=$((${index}+1))
      alt_names="DNS.${index}=${CommonName}"
    else
      if [[ "${CommonName}" != "" ]];then
        index=$((${index}+1))
        alt_names="${alt_names}\nDNS.${index}=${CommonName}"
      fi
    fi
  done

  subj="${subj}/CN=${firstCN}"
  firstCN=${firstCN/\*/\\\*}

  if [ ! -f "${WK_DIR}/private/${firstCN}.key" ];then
    openssl genrsa -out "${WK_DIR}/private/${firstCN}.key" ${bits}
    chmod 400 "${WK_DIR}/private/${firstCN}.key"
    chgrp ssl-cert "${WK_DIR}/private/${firstCN}.key"
  fi

  if [ ! -f "${WK_DIR}/certs/${firstCN}.pem" ];then

    # Creation d'un CSR...
    openssl req -new -sha256 -key "${WK_DIR}/private/${firstCN}.key" -out "${WK_DIR}/newcerts/${firstCN}.csr" -nodes -subj "${subj}" -config  <(PrintMinimalConf)
    
    # Signature du Certificat d'autorite/racine
    openssl ca -name tmp_ca -batch -passin file:"${KEYFILE}" -extensions cert -in "${WK_DIR}/newcerts/${firstCN}.csr" -out "${WK_DIR}/certs/${firstCN}.pem" -config <(PrintMinimalConf;PrintCertConf)

    if [ -f "${WK_DIR}/certs/${firstCN}.pem" ];then
      RANDPASS=$(date | md5sum |  cut -c1-8)
      echo "password : $RANDPASS"
      echo $RANDPASS >  "${WK_DIR}/p12/${firstCN}.passwd"
      openssl pkcs12 -export -password pass:$RANDPASS -inkey "${WK_DIR}/private/${firstCN}.key" -in "${WK_DIR}/certs/${firstCN}.pem" -name "${firstCN}" -certfile "${WK_DIR}/cacert.pem" -caname "${ca}" -out "${WK_DIR}/p12/${firstCN}.p12"
      chmod 444 "${WK_DIR}/certs/${firstCN}.pem"
      chgrp ssl-cert "${WK_DIR}/certs/${firstCN}.pem"
    fi
  else
    openssl x509 -in "${WK_DIR}/certs/${firstCN}.pem" -noout -text
  fi
}

#== BEGIN usage function ==#
usage()     { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+"     | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";}
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";}
scriptinfo(){ head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-"     | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"    ;}
#== END   usage function ==#
#== BEGIN echo  function ==#
info  (){ echo -e "\e[32m<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n$(date) : $1\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\e[39m";}
error (){ echo -e "\e[31m<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n$(date) : $1\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\e[39m";}
#== END   echo  function ==#

#============================
#  FILES AND VARIABLES
#============================

#== general variables ==#
SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_ID="$(scriptinfo | grep script_id | tr -s ' ' | cut -d' ' -f3)"
SCRIPT_NAME="$(basename ${0})" # scriptname without path
SCRIPT_UNIQ="${SCRIPT_NAME%.*}.${SCRIPT_ID}.$(date "+%y%m%d%H%M%S").${$}"
SCRIPT_DIR="$( cd $(dirname "$0") && pwd )" # script directory
SCRIPT_DIR_TEMP="/tmp" # Make sure temporary folder is RW

SCRIPT_TIMELOG_FLAG=0
SCRIPT_TIMELOG_FORMAT="+%y/%m/%d@%H:%M:%S"

HOSTNAME="$(hostname)"
FULL_COMMAND="${0} $*"
DATE=$(date +"%Y%m%d")
EXEC_DATE=$(date "+%y%m%d%H%M%S")
EXEC_ID=${$}


  #== flag option menu R7 ==#
flagOptErr=0
flagOptLog=0
flagOptinfo=0
flagOptVerbose=0
flagOptAutorite=0
flagOptDefault=0
flagOptServeur=0
flagOptClient=0
flagOptMenu=0
flagOptDir=0
flagOptParent=0
flagOptOCSP=0
flagOptRevoke=0
flagOptFast=0
flagOptList=0
flagOptText=0
flagOptMail=0


  #== parse options ==#
while getopts ${SCRIPT_OPTS} OPTION ; do
  if [[ "x$OPTION" == "x-" ]]; then
    LONG_OPTION=$OPTARG
    LONG_OPTARG=$(echo $LONG_OPTION | grep "=" | cut -d'=' -f2)
    LONG_OPTIND=-1
    [[ "x$LONG_OPTARG" = "x" ]] && LONG_OPTIND=$OPTIND || LONG_OPTION=$(echo $OPTARG | cut -d'=' -f1)
    [[ $LONG_OPTIND -ne -1 ]] && eval LONG_OPTARG="\$$LONG_OPTIND"
    OPTION=${ARRAY_OPTS[$LONG_OPTION]}
    [[ "x$OPTION" = "x" ]] &&  OPTION="?" OPTARG="-$LONG_OPTION"

    if [[ $( echo "${SCRIPT_OPTS}" | grep -c "${OPTION}:" ) -eq 1 ]]; then
      if [[ "x${LONG_OPTARG}" = "x" ]] || [[ "${LONG_OPTARG}" = -* ]]; then
        OPTION=":" OPTARG="-$LONG_OPTION"
      else
        OPTARG="$LONG_OPTARG";
        if [[ $LONG_OPTIND -ne -1 ]]; then
          [[ $OPTIND -le $Optnum ]] && OPTIND=$(( $OPTIND+1 ))
          shift $OPTIND
          OPTIND=1
        fi
      fi
    fi
  fi

  #== options follow by another option instead of argument ==#
  if [[ "x${OPTION}" != "x:" ]] && [[ "x${OPTION}" != "x?" ]] && [[ "${OPTARG}" = -* ]]; then
    OPTARG="$OPTION" OPTION=":"
  fi
  #== manage options ==#
  getopts_get_optional_argument() {
    eval next_token=\${$OPTIND}
    OPTARG=()
    while [[ -n $next_token && $next_token != -* ]];
    do
      OPTIND=$((OPTIND + 1))
      OPTARG+=("$next_token")
      eval next_token=\${$OPTIND}
    done
    info "${OPTARG[*]}"
    # return "${OPTARG[*]}"

  }
  case "$OPTION" in
    a ) flagOptMenu=1;flagOptAutorite=1;OptAutorite="${OPTARG}";;

    p ) flagOptMenu=1;flagOptParent=1;OptParent="${OPTARG}";;

    r ) flagOptMenu=1;flagOptRevoke=1;OptRevokeCert="${OPTARG}";;

    o ) flagOptMenu=1;
      getopts_get_optional_argument $@
      OptCN=("${OPTARG[@]}")
      flagOptOCSP=1;;

    f ) flagOptMenu=1;flagOptFast=1;;

    s ) flagOptMenu=1;
      getopts_get_optional_argument $@
      OptCN=("${OPTARG[@]}")

      flagOptServeur=1;;

    c ) flagOptMenu=1;
      getopts_get_optional_argument $@
      OptCN=("${OPTARG[@]}")
      flagOptClient=1;;

    m ) flagOptMenu=1;
      getopts_get_optional_argument $@
      emailAddress=${OPTARG}
      OptCN=${emailAddress}
      flagOptMail=1;;

    t)  flagOptMenu=1;flagOptText=1;OptCert="${OPTARG}";;

    l)  flagOptMenu=1;flagOptList=1;;

    h ) usagefull
      exit 0;;

    i ) scriptinfo
      exit 0;;

    v ) flagOptVerbose=1
      set -x;;

    : ) error "${SCRIPT_NAME}: -$OPTARG: option requires an argument"
      flagOptErr=1 ;;

    ? ) error "${SCRIPT_NAME}: -$OPTARG: unknown option"
      flagOptErr=1 ;;
  esac
done
shift $((${OPTIND} - 1)) ## shift options

#============================
#  MAIN SCRIPT
#============================
if [ ${flagOptMenu} -eq 0 ];then
  usage
  exit -1
fi

if [ "${flagOptAutorite}" = "1" ];then
  WK_DIR="${SSL_DIR}/${OptAutorite}"
  KEYFILE="${KEY_DIR}/${OptAutorite}.key"
  if [ ${flagOptParent} -eq 1 ]&&[ ! -d "${SSL_DIR}/${OptParent}" ];then
    error "The parent directory does not exist, please create the parent authority, exit..". 1>&2 && exit 3;
  fi
  if [ ${flagOptParent} -eq 1 ]&&[ "${OptAutorite}" = "${OptParent}" ];then
    error "Parent and authority have the same name, so strange, isn't it?" 1>&2 && exit 4;
  fi
  info "Repertoire de travail : ${WK_DIR}"
  [ ${flagOptRevoke} -ne 1 ] && [ ${flagOptClient} -ne 1 ] && [ ${flagOptRevoke} -ne 1 ] && [ ${flagOptOCSP} -ne 1 ] && CreerAutorite

  [[ -f "${WK_DIR}/default" ]] && . "${WK_DIR}/default"

  if [ ${flagOptClient} = 1 ]||[ ${flagOptServeur} -eq 1 ]||[ ${flagOptOCSP} -eq 1 ];then
    [[ -r $KEYFILE ]] && CreerCertificat
    [[ -r $KEYFILE ]] || error $KEYFILE not readable 1>&2
    [[ -r $KEYFILE ]] || exit 1;
  else
    if [ ${flagOptRevoke} -eq 1 ];then
      [[ -r $KEYFILE ]] && RevokeCertificat
      [[ -r $KEYFILE ]] || error $KEYFILE not readable 1>&2
      [[ -r $KEYFILE ]] || exit 1;
    else
      if [ ${flagOptText} -eq 1 ];then
        openssl x509 -in "${WK_DIR}/certs/${OptCert}.pem" -noout -text
      else
        if [ ${flagOptList} -eq 1 ];then
          ls -A "${WK_DIR}/certs/" | sed 's/.pem//g'
        else
          openssl x509 -in "${WK_DIR}/cacert.pem" -noout -text
        fi
      fi
    fi
  fi
else
  error "No flag autority specified, exit..." 1>&2 && exit 2;
fi
