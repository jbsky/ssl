#!/bin/bash
#================================================================
# HEADER
#================================================================
#- IMPLEMENTATION
#-  version     ${SCRIPT_NAME} 0.2
#-  author      Julien BLAIS
#-
#================================================================
#  HISTORY
#   2019/12/29 : Creation
#   2021/12/12 : Fix ca certificat
#================================================================
#% DESCRIPTION
#% Industrialisation de la gestion des certificats avec openssl.
#% Permet de créer des certificats avec OpenSSL au format pem ainsi qu'un P12.
#% Ajout d'un keystore.
#%
#% Commands
#%  -a <autority>                       name of the authority
#%  -p <autority>                       name of the parent authority
#%  -s <common name>[,<common name>]    nsCertType server and extendedKeyUsage serverAuth
#%  -c <common name>[,<common name>]    nsCertType client and extendedKeyUsage clientAuth
#%  -o <common name>[,<common name>]    extendedKeyUsage OCSPSigning
#%  -m <common name>[,<common name>]    nsCertType client and emailProtection
#%  -r <common name>                    Revoke a certificate
#%  -t <common name>                    Text out cert
#%  -l                                  List cert
#% Option
#%  -f                                  Run fast without question C/O/OU/L/ST/emailAddress
#%  -h                                  print this help
#%  -v                                  verbose
#%
#+ Exemple :
#+ Creation d'un certificat d'autorite:
#+    ${SCRIPT_NAME} -f -a root
#+
#+ Creation d'un certificat d'autorite lié à un parent:
#+    ${SCRIPT_NAME} -f -a int -p root
#+
#+ Creation d'un certificat avec les flags client, serveur et oscp
#+    ${SCRIPT_NAME} -f -a root -c -s -o ocsp.example.com
#+
#+ Creation d'un certificat fqdn,fqdn2 avec le flag serveur
#+    ${SCRIPT_NAME} [-f] -a int -s example.com,www.example.org   
#+
#+ Revocation du certificat ocsp.example.com
#+    ${SCRIPT_NAME} [-f] -a root -r ocsp.example.com
#+
#+ List des certificats
#+    ${SCRIPT_NAME} -a int -l
#+
#+ Affiche le contenu d'un certificat
#+    ${SCRIPT_NAME} -a int -t mysite.example.com
#+
#================================================================
# END_OF_HEADER
#================================================================

SSL_DIR="${HOME}/ssl"
KEY_DIR="${HOME}/.keys"
bits=2048
days=3650
ocsp=

C="FR"
ST=""
L=""
O=""
OU=""
emailAddress=""

# typeset -A SSL_FLD
# Ordre ou sont posees les questions
SSL_FLD=(
  O
  OU
  C
  L
  ST
  emailAddress
)
#============================
#  general variables
#============================

SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"
DATE=$(date +"%Y%m%d")

#============================
#  FUNCTIONS
#============================

#== BEGIN usage function ==#
usage()     { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+"     | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";}
usagefull() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+-]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";}
help() { head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#%" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g";}
scriptinfo(){ head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#-"     | sed -e "s/^#-//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"    ;}
#== END   usage function ==#

#== BEGIN echo  function ==#
info  (){ echo -e "\e[32m<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n$(date) : $1\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\e[39m";}
error (){ echo -e "\e[31m<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n$(date) : $1\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\e[39m";}
#== END   echo  function ==#

#============================
#  FUNCTIONS Creation de repertoire
#============================
_mkdir(){

  if [ ! -d "${1}" ];then
    mkdir -p "${1}"
    chgrp ssl-cert "${1}"
  fi
}
#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintOCSPServerConf(){
  printf "[ v3_OCSP ]
  basicConstraints = CA:FALSE
  keyUsage = nonRepudiation, digitalSignature, keyEncipherment
  extendedKeyUsage = OCSPSigning\n"
}

PrintPolicyRootConf(){
  printf "[ policy_match ]
  countryName       = match
  stateOrProvinceName   = optional
  organizationName    = optional
  organizationalUnitName  = optional
  commonName        = supplied
  emailAddress      = optional\n"
}

PrintPolicyMinimalConf(){
  printf "[ policy_match ]
  countryName       = match
  stateOrProvinceName   = optional
  organizationName    = optional
  organizationalUnitName  = optional
  commonName        = supplied
  emailAddress      = optional\n"
}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintMinimalConf(){
  printf "[ req ]
  distinguished_name = req_distinguished_name

  [ req_distinguished_name ]

  [ tmp_ca ]
  dir       = ${WK_DIR}
  certs       = \$dir/certs
  crl_dir     = \$dir/crl
  database    = \$dir/index.txt
  new_certs_dir   = \$dir/newcerts
  certificate   = \$dir/cacert.pem
  serial      = \$dir/serial
  crlnumber     = \$dir/crlnumber
  crl       = \$dir/crl.pem
  private_key   = \$dir/private/cakey.pem
  RANDFILE    = \$dir/private/.rand
  x509_extensions = usr_cert
  name_opt    = ca_default
  cert_opt    = ca_default
  default_days  = 365
  default_crl_days= 30
  default_md    = default         # use public key default MD
  preserve    = no          # keep passed DN ordering
  policy      = policy_match

  [ ca ]
  default_ca    = tmp_ca\n"
}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
Print_V3CAConf(){
  printf "[ v3_ca ]
  subjectKeyIdentifier=hash
  authorityKeyIdentifier=keyid:always,issuer
  basicConstraints = critical,CA:true
  keyUsage = cRLSign, keyCertSign
  nsCertType = sslCA, emailCA\n"
}

Print_V3_intermediate_CAConf(){
  printf "[ v3_intermediate_ca ]
  subjectKeyIdentifier = hash
  authorityKeyIdentifier = keyid:always,issuer
  basicConstraints = critical, CA:true, pathlen:0
  keyUsage = critical, digitalSignature, cRLSign, keyCertSign
  nsCertType = sslCA, emailCA\n"

}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintCAConf(){
  printf "[ ca_ext ]
  keyUsage               = critical,keyCertSign,cRLSign
  basicConstraints       = critical,CA:true
  subjectKeyIdentifier   = hash
  authorityKeyIdentifier = keyid:always\n"
}

#============================
#  FUNCTIONS impression d'une partie du fichier openssl.cnf
#============================
PrintCertConf(){
  printf "[ cert ]
  subjectKeyIdentifier        = hash
  authorityKeyIdentifier      = keyid,issuer:always
  basicConstraints            = critical,CA:FALSE
  keyUsage                    = digitalSignature, nonRepudiation, keyEncipherment
  extendedKeyUsage            = ${extendedKeyUsage}
  nsComment                   = \"OpenSSL Generated Certificate\"\n"
  [[ "${index}" != "1" ]] && printf "issuerAltName               = issuer:copy\n"

  [[ "${nsCertType}" != "" ]] && printf "nsCertType                = ${nsCertType}\n"
  [[ "${ocsp}" != "" ]] &&       printf "authorityInfoAccess       = OCSP;URI:http://${ocsp}\n"
  if  [[ "${flagOptMail}" == "1" ]];then
    printf    "subjectAltName           = @alt_names,email:move\n\n[alt_names]\n${alt_names}\n"
  else
    printf    "subjectAltName           = @alt_names\n\n[alt_names]\n${alt_names}\n"
  fi
}
#============================
#  FUNCTIONS Creation d'un certificat d'autorite
#============================
CreerAutorite(){

  if [ ${flagOptParent} -eq 1 ];then
    info "Creation d'un certificat d'autorite intermediaire '${OptAutorite}' signé à partir de '${OptParent}'"
    WK_DIR="${SSL_DIR}/${OptParent}"

    # Extraction du Subject du parent
    SUB=$(openssl x509 -noout -subject -in ${WK_DIR}/cacert.pem)

    # Formatage pour extraction des differents champs OU/C/O/L/ST/emailAddress
    WK_SUB=$(echo "${SUB#*=}" | sed -e "s/\ =\ /='/g"|sed -e "s/, /',/g"|sed 's/[[:blank:]]*$//')\'

    # On compte le nombre de champ a extraire par le caractere ","
    COUNTER=$(($(echo "${WK_SUB}" | grep -o "," | wc -l)+1))

    if [ "${COUNTER}" -gt "0" ];then
      for ((i=1;i<="${COUNTER}";i++));
      do
        eval "$(cut -d "," -f "$i" <<< "${WK_SUB}")"
      done
    fi
  else
    info "Creation d'un certificat d'autorite racine: ${OptAutorite}"

  fi
  WK_DIR="${SSL_DIR}/${OptAutorite}"
  CN="${OptAutorite} - Certification Authority Root"
  OU="Secure Digital Certificate Signing"
  O=${OptAutorite}

  if [ "${flagOptFast}" = "0" ];then

    for field in "${SSL_FLD[@]}"
    do
      read -p "Please enter a new value or enter to confirm ${field}=${!field} : " NEW_VALUE
      if [[ "${NEW_VALUE}" != "" ]];then
        eval "${field}=${NEW_VALUE}"
      fi
    done
  fi


  [ "${C}" = "" ] ||subj="/C=${C}"
  [ "${ST}" = "" ]||subj="${subj}/ST=${ST}"
  [ "${L}" = "" ] ||subj="${subj}/L=${L}"
  [ "${O}" = "" ] ||subj="${subj}/O=${O}"
  [ "${OU}" = "" ]||subj="${subj}/OU=${OU}"
  [ "${emailAddress}" = "" ]||subj="${subj}/emailAddress=${emailAddress}"
  subj="${subj}/CN=${CN}"

  _mkdir "${WK_DIR}/certs"
  _mkdir "${WK_DIR}/crl"
  _mkdir "${WK_DIR}/newcerts"
  _mkdir "${WK_DIR}/private"
  _mkdir "${WK_DIR}/p12"
  _mkdir "${KEY_DIR}"

  if [ ${flagOptFast} -eq 0 ];then
    read -p "Please enter a URL for ocsp serveur : " ocsp
  fi
  if [[ "${ocsp}" != "" ]];then
    echo "ocsp=${ocsp}" > "${WK_DIR}/default"
  fi
  chmod -R 750 "${WK_DIR}/private"

  if [[ ! -f "${WK_DIR}/private/cakey.pem" ]]; then
    touch "${WK_DIR}/index.txt"
    touch "${WK_DIR}/serial"
    RANDPASS=$(date | md5sum |  cut -c1-16)
    touch "${KEY_DIR}/${OptAutorite}.key"
    echo "$RANDPASS" >  "${KEY_DIR}/${OptAutorite}.key"
    openssl genrsa -aes256 -out "${WK_DIR}/private/cakey.pem" -passout file:"${KEY_DIR}/${OptAutorite}.key" ${bits}
    chmod 400 "${WK_DIR}/private/cakey.pem"
    chgrp ssl-cert "${WK_DIR}/private/cakey.pem"
  fi

  # Soit le nouveau certificat d'autorite a un parent => certificat d'autorite intermediaire
  if [ ${flagOptParent} -eq 1 ];then
    WK_DIR="${SSL_DIR}/${OptParent}"
    # Creation d'un CSR...
    if [[ ! -f "${SSL_DIR}/${OptAutorite}/CA.csr" ]]; then
      openssl req -new -out "${SSL_DIR}/${OptAutorite}/CA.csr" \
      -key "${SSL_DIR}/${OptAutorite}/private/cakey.pem" \
      -passin file:"${KEY_DIR}/${OptAutorite}.key" \
      -subj "${subj}" \
      -extensions v3_intermediate_ca \
      -config <(PrintMinimalConf;PrintPolicyMinimalConf;Print_V3_intermediate_CAConf)
    fi

    # La certif parent signe avec sa cle
    if [[ ! -f "${SSL_DIR}/${OptAutorite}/cacert.pem" ]]; then
  
      openssl ca -batch -days ${days} -create_serial \
      -passin file:"${KEY_DIR}/${OptParent}.key" \
      -in "${SSL_DIR}/${OptAutorite}/CA.csr" \
      -out "${SSL_DIR}/${OptAutorite}/cacert.pem" \
      -extensions v3_intermediate_ca \
      -config <(PrintMinimalConf;PrintPolicyMinimalConf;Print_V3_intermediate_CAConf)

      chgrp ssl-cert "${SSL_DIR}/${OptAutorite}/cacert.pem"
      chmod 644 "${SSL_DIR}/${OptAutorite}/cacert.pem"
      openssl x509 -serial -noout -in "${SSL_DIR}/${OptAutorite}/cacert.pem" | cut -d= -f2 > "${SSL_DIR}/${OptAutorite}/serial"
      printf "%X\n" $((0x$(cat "${SSL_DIR}/${OptAutorite}/serial")+1))>"${SSL_DIR}/${OptAutorite}/serial"
      WK_DIR="${SSL_DIR}/${OptAutorite}"

    fi
    # On cree la chaine CA Racine + celui qu'on vient de creer.
    cat "${SSL_DIR}/${OptParent}/cacert.pem" "${SSL_DIR}/${OptAutorite}/cacert.pem" > "${SSL_DIR}/${OptAutorite}/cachain.pem"

  else
    # Soit le certificat est bien racine / pas de parent
    if [[ ! -f "${WK_DIR}/cacert.pem" ]]; then
      openssl req -x509 -sha512 \
      -extensions v3_ca \
      -days ${days} \
      -subj "${subj}" \
      -key "${WK_DIR}/private/cakey.pem" \
      -passin file:"${KEY_DIR}/${OptAutorite}.key" \
      -out "${WK_DIR}/cacert.pem" \
      -config <(PrintMinimalConf;PrintPolicyRootConf;Print_V3CAConf)
      
      chgrp ssl-cert "${WK_DIR}/cacert.pem"
      chmod 644 "${WK_DIR}/cacert.pem"
      openssl x509 -serial -noout -in "${WK_DIR}/cacert.pem" | cut -d= -f2 > "${WK_DIR}/serial"
      printf "%X\n" $((0x$(cat "${WK_DIR}/serial")+1))>"${WK_DIR}/serial"
    fi
  fi
  [[ -f /usr/bin/keytool ]] && \
  keytool -import -trustcacerts -file "${WK_DIR}/cacert.pem" -keystore "${WK_DIR}/$(basename ${WK_DIR}).jks" -storepass changeit -noprompt
  RANDPK12=$(date | md5sum |  cut -c1-8)
  echo "password : $RANDPK12"
  echo $RANDPK12 >  "${WK_DIR}/p12/cacert.passwd"
  openssl pkcs12 -export -password pass:$RANDPK12 -passin pass:"$(cat "${KEY_DIR}/${OptAutorite}.key")" -inkey "${WK_DIR}/private/cakey.pem" -in "${WK_DIR}/cacert.pem" -name "${ca}" -out "${WK_DIR}/p12/cacert.p12"
  [[ -f /usr/bin/keytool ]] && \
  keytool -importkeystore -noprompt -trustcacerts -destkeystore "${WK_DIR}/$(basename ${WK_DIR}).jks" -srcstoretype PKCS12 -srckeystore "${WK_DIR}/p12/cacert.p12" -srcstorepass $RANDPK12 -storepass changeit
}

#============================
#  FUNCTIONS Revoke un certificat
#============================
RevokeCertificat(){
  info "Revocation d'un certificat du certificat: ${OptRevokeCert}"

  [[ -f ${WK_DIR}/certs/${OptRevokeCert}.pem ]] && \
    openssl ca -revoke "${WK_DIR}/certs/${OptRevokeCert}.pem" -name tmp_ca -passin file:"${KEYFILE}"  -config <(PrintMinimalConf)
  [[ -f ${WK_DIR}/certs/${OptRevokeCert}.pem ]] && \
    mv "${WK_DIR}/certs/${OptRevokeCert}.pem"  "${WK_DIR}/certs/${OptRevokeCert}.pem.${DATE}.drop"
  [[ -f ${WK_DIR}/private/${OptRevokeCert}.key ]] && \
    mv "${WK_DIR}/private/${OptRevokeCert}.key"  "${WK_DIR}/private/${OptRevokeCert}.key.${DATE}.drop"

  [[ -f /usr/bin/keytool ]] && \
    keytool -delete -alias ${OptRevokeCert} -keystore "${WK_DIR}/$(basename ${WK_DIR}).jks" -storepass changeit
}

#============================
#  FUNCTIONS Creer un certificat
#============================
CreerCertificat(){

  # Extraction du Subject
  SUB=$(openssl x509 -noout -subject -in "${WK_DIR}/cacert.pem")

  # Formatage pour extraction des differents champs OU/C/O/L/ST/emailAddress
  WK_SUB=$(echo "${SUB#*=}" | sed -e "s/\ =\ /='/g"|sed -e "s/, /',/g"|sed 's/[[:blank:]]*$//')\'

  # On compte le nombre de champ a extraire par le caractere ","
  COUNTER=$(($(echo "${WK_SUB}" | grep -o "," | wc -l)+1))

  if [ "${COUNTER}" -gt "0" ];then
    for ((i=1;i<=${COUNTER};i++));
    do
      eval "$(cut -d "," -f $i <<< "${WK_SUB}")"
    done
  fi

  if [ "${flagOptFast}" -eq "0" ];then
    for field in "${SSL_FLD[@]}"
    do
      read -p "Please enter a new value or enter to confirm ${field}=${!field} : " NEW_VALUE
      if [[ "${NEW_VALUE}" != "" ]];then
        $(${!field}=${NEW_VALUE})
      fi
    done
  fi

  extendedKeyUsage=""
  nsCertType=""
  if [ ${flagOptClient} -eq 1 ];then
    nsCertType="client"
    extendedKeyUsage="clientAuth"
  fi
  if [ ${flagOptMail} -eq 1 ];then
    nsCertType="client"
    extendedKeyUsage="clientAuth, emailProtection"
  fi
  if [ ${flagOptServeur} -eq 1 ];then
    [[ "${nsCertType}" != "" ]] && nsCertType="${nsCertType}, server"
    [[ "${nsCertType}" == "" ]] && nsCertType="server"
    [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, serverAuth"
    [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="serverAuth"
  fi
  if [ ${flagOptOCSP} -eq 1 ];then
    [[ "${extendedKeyUsage}" != "" ]] && extendedKeyUsage="${extendedKeyUsage}, OCSPSigning"
    [[ "${extendedKeyUsage}" == "" ]] && extendedKeyUsage="OCSPSigning"
  fi
  index=0
  [ "${C}" = "" ] ||subj="/C=${C}"
  [ "${ST}" = "" ]||subj="${subj}/ST=${ST}"
  [ "${L}" = "" ] ||subj="${subj}/L=${L}"
  [ "${O}" = "" ] ||subj="${subj}/O=${O}"
  [ "${OU}" = "" ]||subj="${subj}/OU=${OU}"
  [ "${emailAddress}" = "" ]||subj="${subj}/emailAddress=${emailAddress}"
  if [ "${OptCN}" != "" ]; then
    OLDIFS=$IFS
    IFS=','

    read -ra field <<< ${OptCN[*]}
    for CommonName in "${field[@]}";
    do
      if [[ "${firstCN}" == ""  ]];then
      # alt_names="DNS.${index}:${CommonName}"
        firstCN=${CommonName}
        index=$((${index}+1))
        alt_names="DNS.${index}=${CommonName}"
      else
        index=$((${index}+1))
        alt_names="${alt_names}\nDNS.${index}=${CommonName}"
      fi
    done
    IFS=$OLDIFS
  else
    # sinon on ajoute à la main
    while [[ "${CommonName}" != "" || "${firstCN}" == "" ]];do
      read -p "CN ${index}:" CommonName
      if [[ "${CommonName}" != "" && "${firstCN}" == ""  ]];then
        firstCN=${CommonName}
        index=$((${index}+1))
        alt_names="DNS.${index}=${CommonName}"
      else
        if [[ "${CommonName}" != "" ]];then
          index=$((${index}+1))
          alt_names="${alt_names}\nDNS.${index}=${CommonName}"
        fi
      fi
    done
  fi
  info "Creation du certificat: ${firstCN}"

  subj="${subj}/CN=${firstCN}"
  firstCN=${firstCN/\*/\\\*}

  if [ ! -f "${WK_DIR}/private/${firstCN}.key" ];then
    openssl genrsa -out "${WK_DIR}/private/${firstCN}.key" ${bits}
    chmod 400 "${WK_DIR}/private/${firstCN}.key"
    chgrp ssl-cert "${WK_DIR}/private/${firstCN}.key"
  fi

  if [ ! -f "${WK_DIR}/certs/${firstCN}.pem" ];then

    # Creation d'un CSR...
    openssl req -new -sha256 -key "${WK_DIR}/private/${firstCN}.key" -out "${WK_DIR}/newcerts/${firstCN}.csr" -nodes -subj "${subj}" -config  <(PrintMinimalConf;PrintPolicyMinimalConf)

    # Signature du Certificat d'autorite/racine
    openssl ca -name tmp_ca \
  -batch \
  -passin file:"${KEYFILE}" \
  -extensions cert \
  -in "${WK_DIR}/newcerts/${firstCN}.csr" \
  -out "${WK_DIR}/certs/${firstCN}.pem" -config <(PrintMinimalConf;PrintPolicyMinimalConf;PrintCertConf)

    if [ -f "${WK_DIR}/certs/${firstCN}.pem" ];then
      RANDPASS=$(date | md5sum |  cut -c1-8)
      echo "password : $RANDPASS"
      echo $RANDPASS >  "${WK_DIR}/p12/${firstCN}.passwd"
      openssl pkcs12 -export \
  -password pass:$RANDPASS \
  -inkey "${WK_DIR}/private/${firstCN}.key" \
  -in "${WK_DIR}/certs/${firstCN}.pem" \
  -name "${firstCN}" \
  -certfile "${WK_DIR}/cacert.pem" \
  -caname "${ca}" \
  -out "${WK_DIR}/p12/${firstCN}.p12"

      chmod 444 "${WK_DIR}/certs/${firstCN}.pem"
      chgrp ssl-cert "${WK_DIR}/certs/${firstCN}.pem"
      [[ -f /usr/bin/keytool ]] && \
      keytool -importkeystore -destkeystore "${WK_DIR}/$(basename ${WK_DIR}).jks" -srcstoretype PKCS12 -srckeystore "${WK_DIR}/p12/${firstCN}.p12" -srcstorepass $RANDPASS -storepass changeit
    fi
  else
    openssl x509 -in "${WK_DIR}/certs/${firstCN}.pem" -noout -text
  fi
}

#== flag option menu R7 ==#
flagOptErr=0
flagOptVerbose=0
flagOptAutorite=0
flagOptServeur=0
flagOptClient=0
flagOptMenu=0
flagOptParent=0
flagOptOCSP=0
flagOptRevoke=0
flagOptFast=0
flagOptList=0
flagOptText=0
flagOptMail=0


#== manage options ==#
getopts_get_optional_argument() {
  eval "next_token=\${$OPTIND}"
  OPTARG=()
  while [[ -n $next_token && $next_token != -* ]];
  do
    OPTIND=$((OPTIND + 1))
    OPTARG+=("$next_token")
    eval "next_token=\${$OPTIND}"
  done
}

#== parse options ==#
while getopts 'hvflscomr:a:t:p:' OPTION ; do

  case "$OPTION" in
    a ) flagOptMenu=1; flagOptAutorite=1; OptAutorite="${OPTARG}";;

    p ) flagOptMenu=1; flagOptParent=1; OptParent="${OPTARG}";;

    r ) flagOptMenu=1; flagOptRevoke=1; OptRevokeCert="${OPTARG}";;

    o ) flagOptMenu=1; getopts_get_optional_argument "$@"; OptCN=("${OPTARG[@]}"); flagOptOCSP=1;;

    f ) flagOptMenu=1; flagOptFast=1;;

    s ) flagOptMenu=1; getopts_get_optional_argument "$@"; OptCN=("${OPTARG[@]}"); flagOptServeur=1;;

    c ) flagOptMenu=1; getopts_get_optional_argument "$@"; OptCN=("${OPTARG[@]}"); flagOptClient=1;;

    m ) flagOptMenu=1; getopts_get_optional_argument "$@"; emailAddress=${OPTARG}; OptCN=${emailAddress}; flagOptMail=1;;

    t)  flagOptMenu=1;flagOptText=1;OptCert="${OPTARG}";;

    l)  flagOptMenu=1;flagOptList=1;;

    h ) usagefull; exit 0;;

    v ) flagOptVerbose=1; set -x;;

    * ) error "${SCRIPT_NAME}: '${@}' '${OPTION}' unknown option"; flagOptErr=1 ;;
  esac
done
shift "$((OPTIND - 1))"

#============================
#  MAIN SCRIPT
#============================
if [ ${flagOptMenu} -eq 0 ];then
  help
  exit 10
fi

if [ "${flagOptAutorite}" = "1" ];then
  WK_DIR="${SSL_DIR}/${OptAutorite}"
  KEYFILE="${KEY_DIR}/${OptAutorite}.key"
  if [ ${flagOptParent} -eq 1 ]&&[ ! -d "${SSL_DIR}/${OptParent}" ];then
    error "The parent directory does not exist, please create the parent authority, exit..". 1>&2 && exit 3;
  fi
  if [ ${flagOptParent} -eq 1 ]&&[ "${OptAutorite}" = "${OptParent}" ];then
    error "Parent and authority have the same name, so strange, isn't it?" 1>&2 && exit 4;
  fi
  [ ${flagOptRevoke} -ne 1 ] && [ ${flagOptClient} -ne 1 ] && [ ${flagOptServeur} -ne 1 ] && [ ${flagOptText} -ne 1 ] && [ ${flagOptOCSP} -ne 1 ] && CreerAutorite

  [[ -f "${WK_DIR}/default" ]] && . "${WK_DIR}/default"

  if [ ${flagOptClient} = 1 ]||[ ${flagOptServeur} -eq 1 ]||[ ${flagOptOCSP} -eq 1 ];then
    [[ -r $KEYFILE ]] && CreerCertificat
    [[ -r $KEYFILE ]] || error "$KEYFILE" not readable 1>&2
    [[ -r $KEYFILE ]] || exit 1;
  else
    if [ ${flagOptRevoke} -eq 1 ];then
      [[ -r $KEYFILE ]] && RevokeCertificat
      [[ -r $KEYFILE ]] || error "$KEYFILE" not readable 1>&2
      [[ -r $KEYFILE ]] || exit 1;
    else
      if [ ${flagOptText} -eq 1 ];then
        openssl x509 -in "${WK_DIR}/certs/${OptCert}.pem" -noout -text
      else
        if [ ${flagOptList} -eq 1 ];then
          ls -A "${WK_DIR}/certs/" | sed 's/.pem//g'
        else
          openssl x509 -in "${WK_DIR}/cacert.pem" -noout -text
        fi
      fi
    fi
  fi
else
  error "No flag autority specified, exit..." 1>&2 && exit 2;
fi
